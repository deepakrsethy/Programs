Problem Statment :

John likes to travel. He has visited a lot of cities over many years.
Whenever he visits a city, he takes a few photos and saves them on his computer.
Each photo has a name with an extension (“jpg , “png or “jpeg”) and 
there is a record of the name of the city where the photo was taken and the time and date the photo;
for example: “photo. jpg, Warsaw, 2013—09—05 14 : 08: 15”.

John notices that his way of filing photos on his computer has become a mess.
He wants to reorganize the photos. 
First he decides to group the photos by city, 
then, within each such group,
sort the photos by the time they were taken and 
finally assign consecutive natural numbers to the photos, starting from 1 . 

Afterwards he intends to rename all the photos. 
The new name of each photo should begin with the name of the city 
followed by the number already assigned to that photo. 
The number should have leading zeros depending on the maximum number of photos for each city.
Example :
If a city has total 9 photos , then the numbers should be 1, 2, 3.... 9
If a city has total 15 photos, then the numbers should be 01, 02, 03....15
If a city has total 131 photos, then the numbers should be 001, 002, 003....131

Write a function:
function solution (S) { // your code } that, 
given a string representing the list of M photos, 
returns the string representing the list of the new names of all photos
(the order of photos should stay the same).

For example, given a string: 
photo.jpg, Warsaw, 2013-09-05 14:08:15
john.png, London, 2015-06-20 15:13:22
myFriends.png, Warsaw, 2013-09-05 14:07:13
Eiffel.jpg, Paris, 2015-07-23 08:03:02
pisatower.jpg, Paris, 2015-07-22 23:59:59
BOB.jpg, London, 2015-08-05 00:02:03
notredame.png, Paris, 2015-09-01 12:00:00
me.jpg, Warsaw, 2013-09-06 15:40:22
a.png, Warsaw, 2016-02-13 13:33:50
b.jpg, Warsaw, 2016-01-02 15:12:22
c.jpg, Warsaw, 2016-01-02 14:34:30
d.jpg, Warsaw, 2016-01-02 15:15:01
e.png, Warsaw, 2016-01-02 09:49:09
f.png, Warsaw, 2016-01-02 10:55:32
g.jpg, Warsaw, 2016-02-29 22:13:11

your function should return: 
Warsaw02.jpg 
London1.png
Warsaw01.png
Paris2.jpg 
Paris1.jpg
London2.jpg 
Paris3.jpg
Warsaw03.jpg 
Warsaw09.jpg 
Warsaw07.jpg
Warsaw06.jpg 
Warsaw08.jpg
Warsaw04.jpg
Warsaw05.jpg
Warsaw10.jpg

as there are ten photos taken in Warsaw (numbered from 01 to 10), 
two photos in London (numbered from 1 to 2) and 
three photos in Paris (numbered from 1 to 3). 
The new names of the photos are returned in the same order as in the given string.



Solution :

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class Solution {

    public static void main(String[] args) {

        Solution solution = new Solution();
        String input = "photo.jpg, Warsaw, 2013-09-05 14:08:15\n" +
                "john.png, London, 2015-06-20 15:13:22\n" +
                "myFriends.png, Warsaw, 2013-09-05 14:07:13\n" +
                "Eiffel.jpg, Paris, 2015-07-23 08:03:02\n" +
                "pisatower.jpg, Paris, 2015-07-22 23:59:59\n" +
                "BOB.jpg, London, 2015-08-05 00:02:03\n" +
                "notredame.png, Paris, 2015-09-01 12:00:00\n" +
                "me.jpg, Warsaw, 2013-09-06 15:40:22\n" +
                "a.png, Warsaw, 2016-02-13 13:33:50\n" +
                "b.jpg, Warsaw, 2016-01-02 15:12:22\n" +
                "c.jpg, Warsaw, 2016-01-02 14:34:30\n" +
                "d.jpg, Warsaw, 2016-01-02 15:15:01\n" +
                "e.png, Warsaw, 2016-01-02 09:49:09\n" +
                "f.png, Warsaw, 2016-01-02 10:55:32\n" +
                "g.jpg, Warsaw, 2016-02-29 22:13:11";

        String output = solution.solution(input);
        System.out.println(output);
    }


    public String solution(String S) {

        String finalResult = ""; // to collect the final result

        String[] input = S.split("\n"); //split the string at each new line

        List<String> listOfPhotos = new ArrayList<>();
        listOfPhotos = Arrays.asList(input);//collect the split strings into an ArrayList

        Map<String, Integer> cityCountMap = new HashMap<>(); //to collect the highest count for each city

        //Create a list of Photos which can be used for sorting on basis of Timestamp (Date)
        List<Photo> photosWithoutCount = new ArrayList<>();
        for (String s : listOfPhotos) {
            String[] eachPhoto = s.split(",");
            String cityName = eachPhoto[1];

            Photo photo = new Photo();
            photo.setPhotoName(eachPhoto[0]);
            photo.setCity(cityName);
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            try {
                photo.setDate(formatter.parse(eachPhoto[2]));
            }
            catch (ParseException e) {
                e.printStackTrace();
            }
            photosWithoutCount.add(photo);
        }

        //sort the list w.r.t. date
        Collections.sort(photosWithoutCount, new TimeComparator());

        //create another list after sorting with count. Count should be based on the date and not on input order
        List<Photo> photosWithCount = new ArrayList<>();
        for (Photo photo : photosWithoutCount) {

            if (cityCountMap.containsKey(photo.getCity())) {
                int count = cityCountMap.get(photo.getCity());
                cityCountMap.put(photo.getCity(), count + 1);
                photo.setCount(count + 1);

            }
            else {
                cityCountMap.put(photo.getCity(), 1);
                photo.setCount(1);
            }
            photosWithCount.add(photo);
        }

        //create the new name based on the city and count
        Map<String, String> newNameMap = new HashMap<>();
        for (Photo photo : photosWithCount) {

            String cityName = photo.getCity();
            String count = formatCount(photo.getCount(), cityCountMap.get(cityName));
            String extn = (photo.getPhotoName()).split("[.]")[1];
            String result = cityName + count + "." + extn + "\n";
            newNameMap.put((photo.getPhotoName()).trim(), result);

        }

        //form the final result
        for (String s : listOfPhotos) {
            String[] eachPhoto = s.split(",");
            String photoName = eachPhoto[0];
            finalResult = finalResult + newNameMap.get(photoName.trim());
        }

        return finalResult;
    }

    //format the count by adding leading the zeros and based on the highest count
    private String formatCount(int num, int digit) {
        String format = String.format("%%0%dd", String.valueOf(digit).length());
        String photoNumber = (String.format(format, num));
        return photoNumber;
    }

    class Photo {
        String photoName;
        String city;
        Date date;
        int count;

        public String getNewName() {
            return newName;
        }

        public void setNewName(String newName) {
            this.newName = newName;
        }

        String newName;

        public String getPhotoName() {
            return photoName;
        }

        public void setPhotoName(String photoName) {
            this.photoName = photoName;
        }

        public String getCity() {
            return city;
        }

        public void setCity(String city) {
            this.city = city;
        }

        public Date getDate() {
            return date;
        }

        public void setDate(Date date) {
            this.date = date;
        }

        public int getCount() {
            return count;
        }

        public void setCount(int count) {
            this.count = count;
        }
    }

    //compare Photo on based on date
    class TimeComparator implements Comparator<Photo> {
        public int compare(Photo p1, Photo p2) {
            if ((p1.getDate()).after(p2.getDate())) {
                return 1;
            }
            else {
                return -1;
            }
        }
    }
}

